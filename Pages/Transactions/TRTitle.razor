<tr class="was-validated @(Transaction.Category is "" ? Table.UnHideAndHide[0] : "")">
    <td>
        <p class="@Table.UnHideAndHide[1]">@Transaction.Title</p>
        <input type="text" pattern="[A-Za-zÀ-ÖØ-öø-ÿ]+" class="@Table.UnHideAndHide[0] form-control bg-transparent text-light" @bind="transaction.Category" required placeholder="Category"/>
        <input type="text" pattern="[A-Za-zÀ-ÖØ-öø-ÿ]+" class="@Table.UnHideAndHide[0] form-control bg-transparent text-light" @bind="transaction.Title" required placeholder="Title"/>
    </td>
    <td>
        <p class="@Table.UnHideAndHide[1]">@Transaction.LastMonth €</p>
        <input type="number" class="@Table.UnHideAndHide[0] form-control bg-transparent text-light" @bind="transaction.LastMonth" required />
    </td>
    <td>
        <p class="@Table.UnHideAndHide[1]">@Transaction.ThisMonth €</p>
        <input type="number" class="@Table.UnHideAndHide[0] form-control bg-transparent text-light" @bind="transaction.ThisMonth" required />
    </td>
    <td class="text-right">
        <button @onclick="Done" class="@Table.UnHideAndHide[1] btn btn-@style oi oi-circle-@icon" style="line-height:inherit; position:unset" />
        <button @onclick="Delete" class="@(Transaction.Category is "" ? "d-none" : Table.UnHideAndHide[0]) btn btn-danger oi oi-minus" style="line-height:inherit; position:unset" />
        <button @onclick="Update" class="@(Transaction.Category is "" ? Table.UnHideAndHide[0] : "d-none") btn btn-success oi oi-plus" style="line-height:inherit; position:unset" />
    </td>
</tr>

@code {
    [CascadingParameter] Table Table { get; set; }
    [CascadingParameter] TRCategory TRCategory { get; set; }

    [Parameter] public Transaction Transaction { get; set; }

    private Transaction transaction;
    private string style, icon;

    protected override void OnParametersSet()
    {
        transaction = Transaction;
        style = Transaction.IsDone ? "info" : "outline-info";
        icon = Transaction.IsDone ? "check" : "x";
    }

    void Done()
    {
        style = style == "info" ? "info" : "outline-info";
        icon = icon == "check" ? "check" : "x";
        Transaction.IsDone = !Transaction.IsDone;

        Save();
    }


    void Delete()
    {
        Table.Transactions.Remove(Table.Transactions.Find(t => (t.Category == Transaction.Category) &&
            (t.Title == Transaction.Title) &&
            (t.LastMonth == Transaction.LastMonth) &&
            (t.ThisMonth == Transaction.ThisMonth)));
        Save();
    }

    void Update()
    {
        if (!string.IsNullOrWhiteSpace(transaction.Category) && !string.IsNullOrWhiteSpace(transaction.Title))
        {
            Delete();
            Table.Transactions.Add(transaction);
            Save();
        }
    }

    void Save()
    {
        Table.Transactions.RemoveAll(t => (t.Category == ""));
        Table.Changed();
    }
}